version: 2.1

workflows:
  version: 2.1
  unittest:
    jobs:
      - unit
      - metrics
  integrationtest:
    jobs:
      - integration
  performancetest:
    jobs:
      - performance
      - performanceartifacts

jobs:
  unit:
    docker:
      - image: circleci/golang:1.14 #
    environment:
      LOGCOLOR: TRUE
      LOGLEVEL: TRACE
    steps:
      - checkout # check out source code to working directory
      - run: go build github.com/simonmittag/jabba
      - run: go install github.com/simonmittag/jabba/cmd/jabba
      - run: go test -v

  metrics:
    docker:
      - image: circleci/golang:1.14
    environment:
      TEST_RESULTS: /tmp/test-results
      LOGLEVEL: TRACE
      LOGCOLOR: TRUE
      CC_TEST_REPORTER_ID: a45fccea925702bc9483bdead24976073cf3e3807b22ce566d2858a700e5472c
    steps:
      - checkout # check out source code to working directory
      - run:
          name: Create a temp directory for artifacts
          command: |
            mkdir -p /tmp/artifacts
      - run:
          name: Create a temp directory for tests
          command: |
            mkdir -p /tmp/test-results
      - run:
          name: Setup Code Climate test-reporter
          command: |
            # download test reporter as a static binary
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - run:
          name: Run tests with coverage report and upload to codeclimate
          command: |
            export GIT_COMMITTED_AT="$(date +%s)"
            export CIRCLE_SHA="$CIRCLE_SHA1"
            export CIRCLE_BRANCH=`git rev-parse --abbrev-ref HEAD`
            ./cc-test-reporter before-build
            #only run tests in this directory to exclude integration tests
            go test -cover -coverprofile=c.out .
            go tool cover -html=c.out -o coverage.html
            ./cc-test-reporter after-build --coverage-input-type gocov -p "github.com/simonmittag/jabba"
            mv coverage.html /tmp/artifacts

      - store_artifacts:
          path: /tmp/artifacts

      - run:
          name: Test Summary for CircleCI
          command: |
            gotestsum --junitfile /tmp/test-results/unit-tests.xml .

      - store_test_results:
          path: /tmp/test-results

  integration:
    docker:
      - image: circleci/golang:1.14
    environment:
      LOGLEVEL: WARN
      LOGCOLOR: FALSE
    steps:
      - checkout # check out source code to working directory
      - run: go get github.com/simonmittag/pwt
      - run: go install github.com/simonmittag/pwt/cmd/pwt
      - run: go get github.com/simonmittag/mse6
      - run: go install github.com/simonmittag/mse6/cmd/mse6
      - run:
          name: Start upstream server one
          command: mse6 -p 60083
          background: true
      - run: pwt localhost:60083
      - run:
          name: Start upstream server two
          command: mse6 -p 60084
          background: true
      - run: pwt localhost:60084
      - run: go build github.com/simonmittag/jabba
      - run: go install github.com/simonmittag/jabba/cmd/jabba
      - run:
          name: start jabba
          command: jabba
          background: true
      - run: pwt localhost:8080
      - run: go test -v github.com/simonmittag/jabba/integration

  performance:
    docker:
      - image: simonmittag/wrk
    environment:
      LOGLEVEL: WARN
      LOGCOLOR: FALSE
      UPSTREAM_ONE_PORT: 60083
      UPSTREAM_TWO_PORT: 60084
      JABBA_PORT: 8080
      TEST_DURATION_SECONDS: 10
      TEST_CONCURRENCY: 8
    steps:
      - checkout # check out source code to working directory
      - run:
          name: Install deps
          command: |
            sudo apt-get install jq
            go get github.com/simonmittag/pwt
            go install github.com/simonmittag/pwt/cmd/pwt
            go get github.com/simonmittag/mse6
            go install github.com/simonmittag/mse6/cmd/mse6
      - run:
          name: Start upstream server one
          command: mse6 -p ${UPSTREAM_ONE_PORT}
          background: true
      - run:
          name: Wait for upstream server one
          command: pwt localhost:${UPSTREAM_ONE_PORT}
      - run:
          name: Start upstream server two
          command: mse6 -p ${UPSTREAM_TWO_PORT}
          background: true
      - run:
          name: Wait for upstream server two
          command: pwt localhost:${UPSTREAM_TWO_PORT}
      - run:
          name: Install Jabba
          command: |
            go build github.com/simonmittag/jabba
            go install github.com/simonmittag/jabba/cmd/jabba
      - run:
          name: Start jabba
          command: jabba -p ${JABBA_PORT}
          background: true
      - run:
          name: Wait for Jabba
          command: pwt localhost:${JABBA_PORT}
      - run:
          name: Execute performance tests on Jabba with wrk
          command: cd performance && wrk -t ${TEST_CONCURRENCY} -c ${TEST_CONCURRENCY} -d ${TEST_DURATION_SECONDS}s -s test.lua -- http://localhost:${JABBA_PORT}/mse6/post performance_results.json
      - run:
          name: Display performance test results
          command: |
            export reqss=`cat performance/performance_results.json | jq .requestspersecond`
            echo "(ignore 'Step cancelled' messages upstream, Jabba shutdown related)"
            echo "=> performance test results, ${reqss} req/s"


  performanceartifacts:
    docker:
      - image: simonmittag/wrk
    environment:
      LOGLEVEL: WARN
      LOGCOLOR: FALSE
      PERFORMANCE_REQUEST_SECOND_THRESHOLD: 5000
      UPSTREAM_ONE_PORT: 60083
      UPSTREAM_TWO_PORT: 60084
      JABBA_PORT: 8080
      TEST_DURATION_SECONDS: 10
      TEST_CONCURRENCY: 8
    steps:
      - checkout
      - run:
          name: Install deps
          command: |
            sudo apt-get install jq
            go get github.com/simonmittag/pwt
            go install github.com/simonmittag/pwt/cmd/pwt
            go get github.com/simonmittag/mse6
            go install github.com/simonmittag/mse6/cmd/mse6
      - run:
          name: Start upstream server one
          command: mse6 -p ${UPSTREAM_ONE_PORT}
          background: true
      - run:
          name: Wait for upstream server one
          command: pwt localhost:${UPSTREAM_ONE_PORT}
      - run:
          name: Start upstream server two
          command: mse6 -p ${UPSTREAM_TWO_PORT}
          background: true
      - run:
          name: Wait for upstream server two
          command: pwt localhost:${UPSTREAM_TWO_PORT}
      - run:
          name: Install Jabba
          command: |
            go build github.com/simonmittag/jabba
            go install github.com/simonmittag/jabba/cmd/jabba
      - run:
          name: Start jabba
          command: jabba -p ${JABBA_PORT}
          background: true
      - run:
          name: Wait for Jabba
          command: pwt localhost:${JABBA_PORT}
      - run:
          name: Execute performance tests on Jabba with wrk
          command: cd performance && wrk -t ${TEST_CONCURRENCY} -c ${TEST_CONCURRENCY} -d ${TEST_DURATION_SECONDS}s -s test.lua -- http://localhost:${JABBA_PORT}/mse6/post performance_results.json
      - store_artifacts:
          path: Performance/performance_results.json
          destination: performance_results.json
      - run:
          name: Check performance test results against threshold
          command: |
            export reqss=`cat performance/performance_results.json | jq .requestspersecond`
            test ${reqss} -gt ${PERFORMANCE_REQUEST_SECOND_THRESHOLD} && (echo "performance test passed, ${reqss} req/s > ${PERFORMANCE_REQUEST_SECOND_THRESHOLD} req/s";exit 0) || (echo "performance test failed, ${reqss} req/s < ${PERFORMANCE_REQUEST_SECOND_THRESHOLD} req/s";pkill jq)